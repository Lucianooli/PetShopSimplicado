import org.example.model.Animal;
import org.example.model.Servico;
import org.example.service.ArquivoService;
import org.example.service.PetShopService;

import javax.swing.*;

public class Main {

    public static void main(String[] args) {
        PetShopService petShop = new PetShopService();

        petShop.getAnimais().addAll(ArquivoService.lerAnimais());
        petShop.getServicos().addAll(ArquivoService.lerServicos());

        boolean executando = true;

        while (executando) {
            String[] opcoes = {
                    "üêæ Cadastrar Animal",
                    "üßº Cadastrar Servi√ßo",
                    "üìã Listar Animais",
                    "üìã Listar Servi√ßos",
                    "üõí Comprar Servi√ßo",
                    "‚ùå Sair"
            };

            int opcao = JOptionPane.showOptionDialog(
                    null,
                    "üê∂ Bem-vindo ao PetShop Interativo üêï\n\nEscolha uma op√ß√£o:",
                    "üìç Menu Principal",
                    JOptionPane.DEFAULT_OPTION,
                    JOptionPane.PLAIN_MESSAGE,
                    null,
                    opcoes,
                    opcoes[0]
            );

            switch (opcao) {
                case 0 -> cadastrarAnimal(petShop);
                case 1 -> cadastrarServico(petShop);
                case 2 -> listarAnimais(petShop);
                case 3 -> listarServicos(petShop);
                case 4 -> comprarServico(petShop);
                case 5, JOptionPane.CLOSED_OPTION -> {
                    ArquivoService.salvarAnimais(petShop.getAnimais());
                    ArquivoService.salvarServicos(petShop.getServicos());
                    executando = false;
                }
                default -> mostrarMensagemErro("Op√ß√£o inv√°lida.");
            }
        }

        mostrarMensagemInfo("üêæ Obrigado por usar o PetShop!");
    }

    private static void cadastrarAnimal(PetShopService petShop) {
        String nome = JOptionPane.showInputDialog("üêï Nome do animal:");
        String raca = JOptionPane.showInputDialog("üêæ Ra√ßa do animal:");

        if (nome != null && raca != null && !nome.isBlank() && !raca.isBlank()) {
            petShop.adicionarAnimal(new Animal(nome.trim(), raca.trim()));
            mostrarMensagemInfo("‚úÖ Animal cadastrado com sucesso!");
        } else {
            mostrarMensagemErro("‚ùå Dados inv√°lidos. Preencha corretamente.");
        }
    }

    private static void cadastrarServico(PetShopService petShop) {
        String nome = JOptionPane.showInputDialog("üßº Nome do servi√ßo:");
        String precoStr = JOptionPane.showInputDialog("üí∞ Pre√ßo do servi√ßo:");

        try {
            double preco = Double.parseDouble(precoStr);
            if (!nome.isBlank() && preco > 0) {
                petShop.adicionarServico(new Servico(nome.trim(), preco));
                mostrarMensagemInfo("‚úÖ Servi√ßo cadastrado com sucesso!");
            } else {
                throw new IllegalArgumentException();
            }
        } catch (Exception e) {
            mostrarMensagemErro("‚ùå Entrada inv√°lida. Digite um valor num√©rico v√°lido.");
        }
    }

    private static void listarAnimais(PetShopService petShop) {
        if (petShop.getAnimais().isEmpty()) {
            mostrarMensagemInfo("‚ö†Ô∏è Nenhum animal cadastrado.");
            return;
        }

        StringBuilder sb = new StringBuilder("üìã Lista de Animais:\n\n");
        for (int i = 0; i < petShop.getAnimais().size(); i++) {
            sb.append("üêæ ").append(i).append(" - ").append(petShop.getAnimais().get(i)).append("\n");
        }

        mostrarMensagemInfo(sb.toString());
    }

    private static void listarServicos(PetShopService petShop) {
        if (petShop.getServicos().isEmpty()) {
            mostrarMensagemInfo("‚ö†Ô∏è Nenhum servi√ßo cadastrado.");
            return;
        }

        StringBuilder sb = new StringBuilder("üìã Lista de Servi√ßos:\n\n");
        for (int i = 0; i < petShop.getServicos().size(); i++) {
            sb.append("üíº ").append(i).append(" - ").append(petShop.getServicos().get(i)).append("\n");
        }

        mostrarMensagemInfo(sb.toString());
    }

    private static void comprarServico(PetShopService petShop) {
        if (petShop.getAnimais().isEmpty() || petShop.getServicos().isEmpty()) {
            mostrarMensagemInfo("‚ö†Ô∏è Cadastre ao menos 1 animal e 1 servi√ßo antes.");
            return;
        }

        listarAnimais(petShop);
        String animalIndexStr = JOptionPane.showInputDialog("üìå Informe o n√∫mero do animal:");

        listarServicos(petShop);
        String servicoIndexStr = JOptionPane.showInputDialog("üìå Informe o n√∫mero do servi√ßo:");

        try {
            int indexAnimal = Integer.parseInt(animalIndexStr);
            int indexServico = Integer.parseInt(servicoIndexStr);

            String mensagem = petShop.comprarServico(indexServico, indexAnimal);
            mostrarMensagemInfo("‚úÖ " + mensagem);
        } catch (Exception e) {
            mostrarMensagemErro("‚ùå Entrada inv√°lida. Digite n√∫meros v√°lidos.");
        }
    }

    private static void mostrarMensagemInfo(String mensagem) {
        JOptionPane.showMessageDialog(null, mensagem, "üì¢ Informa√ß√£o", JOptionPane.INFORMATION_MESSAGE);
    }

    private static void mostrarMensagemErro(String mensagem) {
        JOptionPane.showMessageDialog(null, mensagem, "‚ö†Ô∏è Erro", JOptionPane.ERROR_MESSAGE);
    }
}
